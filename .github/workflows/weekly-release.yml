name: Weekly Automated Release Notes

on:
  schedule:
    - cron: "0 20 * * 5"  # ✅ Runs every Friday at 3 PM EST (20:00 UTC)
  workflow_dispatch:  # ✅ Allows manual trigger

permissions:
  contents: write
  pull-requests: write  # ✅ Required to modify PR labels

jobs:
  generate-release:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # ✅ Ensures full commit history for PR data

      # <----      Get PRs from the Last 8 Days  ---- >

      - name: Get PRs from the Last 8 Days
        id: get-prs
        run: |
          # Get the date 8 days ago in ISO 8601 format
          EIGHT_DAYS_AGO=$(date -u -d "8 days ago" +"%Y-%m-%dT%H:%M:%SZ")

          # Fetch PRs merged with the "release" label
          PR_LIST_JSON=$(gh pr list --state merged --label release --json number,title,author,mergedAt,body | 
            jq --arg cutoff "$EIGHT_DAYS_AGO" '[.[] | select(.mergedAt > $cutoff)]')

          echo "Filtered PR_LIST_JSON output (last 8 days only):"
          echo "$PR_LIST_JSON"

          # Save raw JSON for debugging
          echo "$PR_LIST_JSON" > pr_list_raw.json

          # Ensure we have valid PRs
          if [[ -z "$PR_LIST_JSON" || "$PR_LIST_JSON" == "[]" ]]; then
            echo "No valid PRs found. Skipping AI summarization."
            echo "PR_LIST_JSON=[]" >> $GITHUB_ENV
            exit 0  # ✅ Exit gracefully so workflow doesn't fail
          fi

          echo "PR_LIST_JSON<<EOF" >> $GITHUB_ENV
          echo "$PR_LIST_JSON" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # <----      Generate AI Summaries for Each PR  ---- >

      - name: Generate AI Summaries for Each PR
        id: ai-summaries
        run: |
          echo "Calling OpenAI API for each PR..."
          
          AI_SUMMARIES=""

          while read -r PR; do
            PR_TITLE=$(echo "$PR" | jq -r '.title')
            PR_AUTHOR=$(echo "$PR" | jq -r '.author.name // .author.login')
            
            # ✅ Convert PR merge date to PST correctly
            PR_DATE_UTC=$(echo "$PR" | jq -r '.mergedAt')
            PR_DATE=$(TZ=America/Los_Angeles date --date="$PR_DATE_UTC" +"%m/%d/%Y")  # ✅ Fixed date conversion

            PR_BODY=$(echo "$PR" | jq -r '.body')

            # Construct JSON payload (Forces markdown without unnecessary headings)
            JSON_PAYLOAD=$(jq -n --arg title "$PR_TITLE" --arg body "$PR_BODY" '{
              model: "gpt-4o",
              messages: [
                { 
                  role: "system", 
                  content: "You are an AI assistant specializing in summarizing GitHub pull requests. Your summaries should be clear, professional, and user-friendly, providing key takeaways without unnecessary details. Since this is customer-facing, do not include any specific file names. Your response **must be formatted in GitHub Markdown**.\n\n**Do not include any headings like \"Summary\" or \"Summary of Changes\".** Just provide a paragraph overview/summary and additional formatted content using bullet points or structured lists if it enhances the summary."
                },
                { 
                  role: "user", 
                  content: "Summarize the following pull request **in GitHub Markdown format**:\n\n## Title: \($title)\n\n**Description:** \($body)\n\n**Format Requirements:**\n- **DO NOT** include a heading like \"## Summary\" or \"## Summary of Changes\".\n- Start directly with the summary body.\n- Provide a paragraph overview and additional bullet points or numbered lists where necessary.\n- Keep the response concise, structured, and customer-friendly."
                }
              ]
            }')

            echo "Generated JSON Payload:"
            echo "$JSON_PAYLOAD" | jq .

            # Send request to OpenAI
            RESPONSE=$(curl -s https://api.openai.com/v1/chat/completions \
              -H "Authorization: Bearer $OPENAI_API_KEY" \
              -H "Content-Type: application/json" \
              --data-raw "$JSON_PAYLOAD")

            echo "Raw OpenAI Response: $RESPONSE"

            # Extract AI summary (ensuring no extra headings)
            SUMMARY=$(echo "$RESPONSE" | jq -r '.choices[0].message.content // "**AI failed to generate a summary.**"')

            echo "Generated AI Summary: $SUMMARY"

            AI_SUMMARIES+="\n\n## $PR_TITLE\n\n**Date:** $PR_DATE  \n**Author:** $PR_AUTHOR  \n\n**Summary:**\n$SUMMARY\n\n---"
          done <<< "$(echo "$PR_LIST_JSON" | jq -c '.[]')"

          echo "Final AI Summaries:"
          echo "$AI_SUMMARIES"

          echo "AI_SUMMARIES<<EOF" >> $GITHUB_ENV
          echo "$AI_SUMMARIES" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}

      # <----      Create a Branch and Save Release Notes as MDX File  ---- >

      - name: Save Release Notes as MDX File and Create a Branch
        run: |
          mkdir -p internal-docs
          RELEASE_FILE="internal-docs/${{ env.RELEASE_TAG }}.mdx"

          echo -e "# Weekly Release Notes - $(TZ=America/Los_Angeles date +'%B %d, %Y')\n\n${{ env.AI_SUMMARIES }}" > "$RELEASE_FILE"

          git config --global user.email "github-actions@github.com"
          git config --global user.name "GitHub Actions"

          BRANCH_NAME="release${{ env.RELEASE_TAG }}"  # No dash

          # Fetch latest to avoid conflicts
          git fetch origin main

          # Check if branch exists, switch to it or create a new one
          if git ls-remote --exit-code --heads origin "$BRANCH_NAME"; then
            git checkout "$BRANCH_NAME"
            git pull --rebase origin "$BRANCH_NAME"
          else
            git checkout -b "$BRANCH_NAME"
          fi

          # Stage and commit the new file
          git add "$RELEASE_FILE"
          git commit -m "Add release notes for ${{ env.RELEASE_TAG }}"

          # Push the branch
          git push origin "$BRANCH_NAME"
        env:
          GH_TOKEN: ${{ secrets.PAT_GITHUB_TOKEN }}

      # <----      Create Pull Request for Review  ---- >

      - name: Create Pull Request
        run: |
          gh pr create --base main --head "release-${{ env.RELEASE_TAG }}" \
            --title "Release ${{ env.RELEASE_TAG }}" \
            --body "This pull request contains the draft release notes for **${{ env.RELEASE_TAG }}**. Please review before merging and publishing the release." \
            --draft
        env:
          GH_TOKEN: ${{ secrets.PAT_GITHUB_TOKEN }}  # ✅ Uses PAT token

      # <----      Create Draft GitHub Release  ---- >

      - name: Create Draft GitHub Release
        run: |
          RELEASE_TITLE="Weekly Release Notes - $(TZ=America/Los_Angeles date +'%B %d, %Y')"
          gh release create "${{ env.RELEASE_TAG }}" --title "$RELEASE_TITLE" --notes "${{ env.AI_SUMMARIES }}" --draft
        env:
          GH_TOKEN: ${{ secrets.PAT_GITHUB_TOKEN }}  # ✅ Uses PAT token

      # <----      Update PR Labels (Change 'release' → 'released')  ---- >

      - name: Update PR Labels (Change 'release' → 'released')
        run: |
          for PR in $(echo "$PR_LIST_JSON" | jq -r '.[].number'); do
            gh pr edit "$PR" --remove-label "release" --add-label "released"
          done
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
