name: Weekly Automated Release Notes

on:
  schedule:
    - cron: "0 20 * * 5"  # ✅ Runs every Friday at 3 PM EST (20:00 UTC)
  workflow_dispatch:  # ✅ Allows manual trigger

permissions:
  contents: write
  pull-requests: write  # ✅ Required to modify PR labels

jobs:
  generate-release:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # ✅ Ensures full commit history for PR data

      - name: Get PRs from the Last 7 Days
        id: get-prs
        run: |
          PR_LIST_JSON=$(gh pr list --state merged --label release --json number,title,author,mergedAt,body --limit 100)

          echo "Raw PR_LIST_JSON output:"
          echo "$PR_LIST_JSON"

          # Save raw JSON for debugging
          echo "$PR_LIST_JSON" > pr_list_raw.json

          # Ensure we have valid PRs
          if [[ -z "$PR_LIST_JSON" || "$PR_LIST_JSON" == "[]" ]]; then
            echo "No valid PRs found. Skipping AI summarization."
            echo "PR_LIST_JSON=[]" >> $GITHUB_ENV
            exit 0  # ✅ Exit gracefully so workflow doesn't fail
          fi

          echo "PR_LIST_JSON<<EOF" >> $GITHUB_ENV
          echo "$PR_LIST_JSON" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Generate AI Summaries for Each PR
        id: ai-summaries
        run: |
          echo "Calling OpenAI API for each PR..."
          
          AI_SUMMARIES=""

          while read -r PR; do
            PR_TITLE=$(echo "$PR" | jq -r '.title')
            PR_AUTHOR=$(echo "$PR" | jq -r '.author.name // .author.login')
            
            # ✅ Convert PR merge date to PST
            PR_DATE_UTC=$(echo "$PR" | jq -r '.mergedAt')
            PR_DATE=$(date -d "$PR_DATE_UTC UTC" +"%m/%d/%Y")  # ✅ Convert to PST format

            PR_BODY=$(echo "$PR" | jq -r '.body')

            # Construct JSON payload
            JSON_PAYLOAD=$(jq -n --arg title "$PR_TITLE" --arg body "$PR_BODY" '{
              model: "gpt-4o",
              messages: [
                { role: "system", content: "You are an AI assistant specializing in summarizing GitHub pull requests. Your summaries should be clear, professional, and user-friendly, providing key takeaways without unnecessary details. Avoid phrases like 'This pull request does...' and instead focus on the impact of the changes. Your summaries will be read by end-users of our software, so emphasize what has changed and how it benefits them." },
                { role: "user", content: "Summarize the following pull request:\n\nTitle: \($title)\nDescription: \($body)" }
              ]
            }')

            echo "Generated JSON Payload:"
            echo "$JSON_PAYLOAD" | jq .

            # Send request to OpenAI
            RESPONSE=$(curl -s https://api.openai.com/v1/chat/completions \
              -H "Authorization: Bearer $OPENAI_API_KEY" \
              -H "Content-Type: application/json" \
              --data-raw "$JSON_PAYLOAD")

            echo "Raw OpenAI Response: $RESPONSE"

            # Extract AI summary
            SUMMARY=$(echo "$RESPONSE" | jq -r '.choices[0].message.content // "AI failed to generate a summary."')

            echo "Generated AI Summary: $SUMMARY"

            # Append the formatted summary to AI_SUMMARIES
            if [[ -z "$AI_SUMMARIES" ]]; then
              # First PR (No extra line break)
              AI_SUMMARIES="<h2>$PR_TITLE</h2>Date: $PR_DATE<br>Author: $PR_AUTHOR<br>Summary: $SUMMARY"
            else
              # Additional PRs (Add line break between PRs)
              AI_SUMMARIES+="<br><br><h2>$PR_TITLE</h2>Date: $PR_DATE<br>Author: $PR_AUTHOR<br>Summary: $SUMMARY"
            fi
          done <<< "$(echo "$PR_LIST_JSON" | jq -c '.[]')"

          echo "Final AI Summaries:"
          echo "$AI_SUMMARIES"

          # Save the AI summaries to the environment variable
          echo "AI_SUMMARIES<<EOF" >> $GITHUB_ENV
          echo "$AI_SUMMARIES" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}

      - name: Generate Unique Release Tag
        id: release-tag
        run: |
          BASE_TAG=$(date -u +"%Y-%m-%d").v1  # ✅ Uses UTC time to maintain consistency
          TAG=$BASE_TAG
          COUNTER=1

          while gh release view "$TAG" >/dev/null 2>&1; do
            COUNTER=$((COUNTER + 1))
            TAG="${BASE_TAG}.${COUNTER}"
          done

          echo "RELEASE_TAG=$TAG" >> $GITHUB_ENV
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Create GitHub Release with AI Summary
        run: |
          RELEASE_TITLE="Weekly Release Notes - $(TZ=America/Los_Angeles date +'%B %d, %Y')"  # ✅ Uses PST date for the title

          RELEASE_BODY="$AI_SUMMARIES"

          echo "Final Release Notes:"
          echo "$RELEASE_BODY"

          gh release create "${{ env.RELEASE_TAG }}" --title "$RELEASE_TITLE" --notes "$RELEASE_BODY"
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          AI_SUMMARIES: ${{ env.AI_SUMMARIES }}
          RELEASE_TAG: ${{ env.RELEASE_TAG }}

      - name: Update PR Labels (Change 'release' → 'released')
        run: |
          for PR in $(echo "$PR_LIST_JSON" | jq -r '.[].number'); do
            gh pr edit "$PR" --remove-label "release" --add-label "released"
          done
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
