name: Weekly Release Notes

on:
  schedule:
    - cron: '0 20 * * 5'  # ✅ Runs every Friday at 3 PM EST (8 PM UTC)
  workflow_dispatch:  # ✅ Allows manual triggering

permissions:
  contents: write  # ✅ Required to create releases
  pull-requests: write  # ✅ Needed to update PR labels

jobs:
  create-release:
    runs-on: ubuntu-latest
    steps:

      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # ✅ Ensure full history

      - name: Get PRs from the Last 7 Days
        id: get-prs
        run: |
          PR_LIST_JSON=$(gh pr list --state merged --label release --json number,title,author,mergedAt,body,files --limit 100)

          # Check if PR_LIST_JSON is empty or invalid
          if [[ -z "$PR_LIST_JSON" || "$PR_LIST_JSON" == "[]" ]]; then
            echo "No valid PRs found. Skipping AI summarization."
            echo "AI_SUMMARIES=No pull requests found for this release." >> $GITHUB_ENV
            exit 0  # ✅ Exit gracefully so workflow doesn't fail
          fi

          AI_SUMMARIES=""

          for PR in $(echo "$PR_LIST_JSON" | jq -c '.[]'); do
            PR_TITLE=$(echo "$PR" | jq -r '.title')
            PR_BODY=$(echo "$PR" | jq -r '.body')
            PR_AUTHOR=$(echo "$PR" | jq -r '.author.name // .author.login')
            PR_DATE=$(echo "$PR" | jq -r '.mergedAt | split("-") | .[1] + "/" + .[2][:2] + "/" + .[0]')
            PR_FILES=$(echo "$PR" | jq -r '[.files[].path] | join(", ")')

            # Generate AI Summary
            SUMMARY=$(curl -s https://api.openai.com/v1/chat/completions \
              -H "Authorization: Bearer ${{ secrets.OPENAI_API_KEY }}" \
              -H "Content-Type: application/json" \
              -d '{
                "model": "gpt-4-turbo",
                "messages": [
                  {"role": "system", "content": "You are a release note assistant. Summarize the following pull request changes in a concise, useful way."},
                  {"role": "user", "content": "Title: '"$PR_TITLE"'\nDescription: '"$PR_BODY"'\nFiles changed: '"$PR_FILES"'"}
                ]
              }' | jq -r '.choices[0].message.content')

            # Append to AI summaries
            AI_SUMMARIES="$AI_SUMMARIES\n- **$PR_TITLE**\n- **Author:** $PR_AUTHOR\n- **Date:** $PR_DATE\n\n$SUMMARY\n"
          done

          echo "AI_SUMMARIES<<EOF" >> $GITHUB_ENV
          echo "$AI_SUMMARIES" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Generate Release Tag
        id: generate-tag
        run: |
          BASE_TAG=$(date +'%Y-%m-%d.v1')  # ✅ Initial tag: YYYY-MM-DD.v1
          COUNTER=1

          while gh release view "$BASE_TAG" &>/dev/null; do
            COUNTER=$((COUNTER+1))
            BASE_TAG=$(date +'%Y-%m-%d').v$COUNTER  # ✅ Increment version if tag exists
          done

          echo "RELEASE_TAG=$BASE_TAG" >> $GITHUB_ENV
          echo "RELEASE_TITLE=Weekly Release Notes - $(date +'%B %d, %Y')" >> $GITHUB_ENV

      - name: Create GitHub Release
        run: |
          gh release create "$RELEASE_TAG" --title "$RELEASE_TITLE" --notes "$AI_SUMMARIES"
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Change PR Labels to 'released'
        run: |
          PR_NUMBERS=$(gh pr list --state merged --label release --json number --jq 'map(.number) | join(" ")')
          if [[ ! -z "$PR_NUMBERS" ]]; then
            for PR in $PR_NUMBERS; do
              gh pr edit $PR --remove-label release --add-label released
            done
          fi
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
