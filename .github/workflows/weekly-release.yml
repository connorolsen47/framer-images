name: Weekly Automated Release Notes

on:
  schedule:
    - cron: "0 20 * * 5"  # ✅ Runs every Friday at 3 PM EST (20:00 UTC)
  workflow_dispatch:  # ✅ Allows manual trigger

permissions:
  contents: write
  pull-requests: write  # ✅ Required to modify PR labels

jobs:
  generate-release:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # ✅ Ensures full commit history for PR data

      - name: Get PRs from the Last 7 Days (with File Changes)
        id: get-prs
        run: |
          echo "Fetching PRs from the last 7 days..."
          PR_LIST_JSON=$(gh pr list --state merged --label release --json number,title,author,mergedAt,body,files --limit 100)

          echo "Raw PR_LIST_JSON output:"
          echo "$PR_LIST_JSON" > pr_list_raw.json

          # Ensure we have valid PRs
          if [[ -z "$PR_LIST_JSON" || "$PR_LIST_JSON" == "[]" ]]; then
            echo "No valid PRs found. Skipping AI summarization."
            echo "PR_LIST_JSON=[]" >> $GITHUB_ENV
            exit 0  # ✅ Exit gracefully so workflow doesn't fail
          fi

          RELEASE_DRAFT=$(echo "$PR_LIST_JSON" | jq -c '
            map({
              title: .title,
              author: if .author.name then .author.name else .author.login end,  # ✅ Proper fallback
              date: (.mergedAt | split("-") | .[1] + "/" + .[2][:2] + "/" + .[0]),
              body: .body,
              files: if .files then [.files[].path] else [] end  # ✅ Handle empty file lists
            })'
          )

          echo "RELEASE_DRAFT<<EOF" >> $GITHUB_ENV
          echo "$RELEASE_DRAFT" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

          # Save for debugging
          echo "$RELEASE_DRAFT" > release_draft.json
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Generate AI Summary from PR Details & Files
        id: ai-summary
        run: |
          echo "Calling OpenAI API for summarization..."
          
          ESCAPED_DRAFT=$(echo "$RELEASE_DRAFT" | jq -Rs .)

          # Construct JSON Payload for OpenAI
          JSON_PAYLOAD=$(jq -n --arg text "$ESCAPED_DRAFT" '{
            model: "gpt-4o",
            messages: [
              { role: "system", content: "You are a helpful assistant that summarizes GitHub pull request changes into structured and clear release notes." },
              { role: "user", content: "Summarize the following PRs and their file changes into a useful release note:\n\($text)" }
            ]
          }')

          echo "Generated JSON Payload:"
          echo "$JSON_PAYLOAD" | jq .  # ✅ Print payload for debugging

          # Send request to OpenAI
          RESPONSE=$(curl -s https://api.openai.com/v1/chat/completions \
            -H "Authorization: Bearer $OPENAI_API_KEY" \
            -H "Content-Type: application/json" \
            --data-raw "$JSON_PAYLOAD")

          echo "Raw OpenAI Response: $RESPONSE"

          # Extract summary from API response
          AI_SUMMARY=$(echo "$RESPONSE" | jq -r '.choices[0].message.content // "AI failed to generate a summary."')

          # Print extracted summary
          echo "Generated AI Summary:"
          echo "$AI_SUMMARY"

          echo "AI_SUMMARY<<EOF" >> $GITHUB_ENV
          echo "$AI_SUMMARY" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}

      - name: Generate Unique Release Tag
        id: release-tag
        run: |
          BASE_TAG=$(date +'%Y-%m-%d').v1
          TAG=$BASE_TAG
          COUNTER=1
          
          while gh release view "$TAG" >/dev/null 2>&1; do
            COUNTER=$((COUNTER + 1))
            TAG="${BASE_TAG}.${COUNTER}"
          done
          
          echo "RELEASE_TAG=$TAG" >> $GITHUB_ENV
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Create GitHub Release (Using AI Summary)
        run: |
          RELEASE_TITLE="Weekly Release Notes - $(date +'%B %d, %Y')"  # ✅ Format: Month DD, YYYY

          gh release create "${{ env.RELEASE_TAG }}" --title "$RELEASE_TITLE" --notes "${{ env.AI_SUMMARY }}"
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Update PR Labels (Change 'release' → 'released')
        run: |
          for PR in $(echo "$PR_LIST_JSON" | jq -r '.[].number'); do
            gh pr edit "$PR" --remove-label "release" --add-label "released"
          done
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
