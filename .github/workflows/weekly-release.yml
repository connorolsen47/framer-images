name: Weekly Automated Release Notes

on:
  schedule:
    - cron: "0 20 * * 5"  # ✅ Runs every Friday at 3 PM EST (20:00 UTC)
  workflow_dispatch:  # ✅ Allows manual trigger

permissions:
  contents: write
  pull-requests: write  # ✅ Required to modify PR labels

jobs:
  generate-release:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # ✅ Ensures full commit history for PR data

      # <----      Get PRs from the Last 8 Days  ---- >

      - name: Get PRs from the Last 8 Days
        id: get-prs
        run: |
          # Get the date 8 days ago in ISO 8601 format
          EIGHT_DAYS_AGO=$(date -u -d "8 days ago" +"%Y-%m-%dT%H:%M:%SZ")

          # Fetch PRs merged with the "release" label
          PR_LIST_JSON=$(gh pr list --state merged --label release --json number,title,author,mergedAt,body | 
            jq --arg cutoff "$EIGHT_DAYS_AGO" '[.[] | select(.mergedAt > $cutoff)]')

          echo "Filtered PR_LIST_JSON output (last 8 days only):"
          echo "$PR_LIST_JSON"

          # Save raw JSON for debugging
          echo "$PR_LIST_JSON" > pr_list_raw.json

          # Ensure we have valid PRs
          if [[ -z "$PR_LIST_JSON" || "$PR_LIST_JSON" == "[]" ]]; then
            echo "No valid PRs found. Skipping AI summarization."
            echo "PR_LIST_JSON=[]" >> $GITHUB_ENV
            exit 0  # ✅ Exit gracefully so workflow doesn't fail
          fi

          echo "PR_LIST_JSON<<EOF" >> $GITHUB_ENV
          echo "$PR_LIST_JSON" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

       # <----      Generate AI Summaries for Each PR  ---- >

      - name: Generate AI Summaries for Each PR
        id: ai-summaries
        run: |
          echo "Calling OpenAI API for each PR..."
          
          AI_SUMMARIES=""

          while read -r PR; do
            PR_TITLE=$(echo "$PR" | jq -r '.title')
            PR_AUTHOR=$(echo "$PR" | jq -r '.author.name // .author.login')
            
            # ✅ Convert PR merge date to PST correctly
            PR_DATE_UTC=$(echo "$PR" | jq -r '.mergedAt')
            PR_DATE=$(TZ=America/Los_Angeles date --date="$PR_DATE_UTC" +"%m/%d/%Y")  # ✅ Fixed date conversion

            PR_BODY=$(echo "$PR" | jq -r '.body')

            # Construct JSON payload (Forces markdown without unnecessary headings)
            JSON_PAYLOAD=$(jq -n --arg title "$PR_TITLE" --arg body "$PR_BODY" '{
              model: "gpt-4o",
              messages: [
                { 
                  role: "system", 
                  content: "You are an AI assistant specializing in summarizing GitHub pull requests. Your summaries should be clear, professional, and user-friendly, providing key takeaways without unnecessary details. Since this is customer-facing, do not include any specific files. Your response **must be formatted in GitHub Markdown**.\n\n**Do not include any headings like 'Summary' or 'Summary of Changes'.** Just provide the formatted content using bullet points or structured lists where applicable."
                },
                { 
                  role: "user", 
                  content: "Summarize the following pull request **in GitHub Markdown format**:\n\n## Title: \($title)\n\n**Description:** \($body)\n\n**Format Requirements:**\n- **DO NOT** include a heading like '## Summary' or '## Summary of Changes'.\n- Start directly with the summary body.\n- Use bullet points or numbered lists where necessary.\n- Keep the response concise, structured, and customer-friendly."
                }
              ]
            }')

            echo "Generated JSON Payload:"
            echo "$JSON_PAYLOAD" | jq .

            # Send request to OpenAI
            RESPONSE=$(curl -s https://api.openai.com/v1/chat/completions \
              -H "Authorization: Bearer $OPENAI_API_KEY" \
              -H "Content-Type: application/json" \
              --data-raw "$JSON_PAYLOAD")

            echo "Raw OpenAI Response: $RESPONSE"

            # Extract AI summary (ensuring no extra headings)
            SUMMARY=$(echo "$RESPONSE" | jq -r '.choices[0].message.content // "**AI failed to generate a summary.**"')

            echo "Generated AI Summary: $SUMMARY"

            # Append the formatted summary using Markdown syntax
            if [[ -z "$AI_SUMMARIES" ]]; then
              # First PR (No extra line break)
              AI_SUMMARIES="## $PR_TITLE\n\n**Date:** $PR_DATE  \n**Author:** $PR_AUTHOR  \n\n**Summary:**\n$SUMMARY\n\n---"
            else
              # Additional PRs (Add a divider between PRs)
              AI_SUMMARIES+="\n\n## $PR_TITLE\n\n**Date:** $PR_DATE  \n**Author:** $PR_AUTHOR  \n\n**Summary:**\n$SUMMARY\n\n---"
            fi
          done <<< "$(echo "$PR_LIST_JSON" | jq -c '.[]')"

          echo "Final AI Summaries:"
          echo "$AI_SUMMARIES"

          # Save the AI summaries to the environment variable
          echo "AI_SUMMARIES<<EOF" >> $GITHUB_ENV
          echo "$AI_SUMMARIES" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}

      # <----      Generate Unique Release Tag  ---- >

      - name: Generate Unique Release Tag (Custom Versioning)
        id: release-tag
        run: |
          # Fetch the latest tag from GitHub (ignoring errors if no tags exist yet)
          LATEST_TAG=$(gh release list --limit 1 --json tagName --jq '.[0].tagName' 2>/dev/null || echo "")

          # Set default major version (manually updated when needed)
          MAJOR=0  # You can manually update this when needed

          # If no tags exist, start with v0.1.0
          if [[ -z "$LATEST_TAG" ]]; then
            MINOR=1
          else
            # Extract minor version
            MINOR=$(echo "$LATEST_TAG" | cut -d. -f2)
            # Increment minor version
            MINOR=$((MINOR + 1))
          fi

          # Fetch the number of merged PRs
          PATCH=$(gh pr list --state merged --json number | jq 'length')

          # Construct new version tag
          NEW_TAG="v$MAJOR.$MINOR.$PATCH"

          echo "Generated new custom release tag: $NEW_TAG"
          echo "RELEASE_TAG=$NEW_TAG" >> $GITHUB_ENV
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # <----      Create GitHub Release with AI Summary  ---- >

      - name: Create GitHub Release with AI Summary
        run: |
          RELEASE_TITLE="Weekly Release Notes - $(TZ=America/Los_Angeles date +'%B %d, %Y')"  # ✅ Uses PST date for the title

          RELEASE_BODY="$AI_SUMMARIES"

          echo "Final Release Notes (Markdown):"
          echo "$RELEASE_BODY"

          gh release create "${{ env.RELEASE_TAG }}" --title "$RELEASE_TITLE" --notes "$RELEASE_BODY" --notes-file <(echo -e "$RELEASE_BODY")
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          AI_SUMMARIES: ${{ env.AI_SUMMARIES }}
          RELEASE_TAG: ${{ env.RELEASE_TAG }}

      # <----      Update PR Labels (Change 'release' → 'released')  ---- >

      - name: Update PR Labels (Change 'release' → 'released')
        run: |
          for PR in $(echo "$PR_LIST_JSON" | jq -r '.[].number'); do
            gh pr edit "$PR" --remove-label "release" --add-label "released"
          done
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
